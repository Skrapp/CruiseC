// Display RPM of motor attached to the port MOTOR while running at full speed.
// The program runs continously until stopped by pressing the gray NXT button.
// Requires NXT firmware 1.28 or later (uses floating point arithmetic).
// CurrentTick returns milliseconds in a long integer.
// MotorRotationCount returns degrees in a long integer.
#define MOTOR OUT_A
//#define FULL_SPEED 60
#define DEG_TO_CMPM 166.6667*17.5 // converts degrees per millisecond to CMPM
int setpoint;
float error_area = 0;
float prev_error = 0;
long prev_time;
long prev_degrees = 0;
mutex moveMutex;

task button()
{
while (true)
 {
   if (ButtonPressed (BTNLEFT, false))                                           // börv minskar om man tryckeer på vänster pil
   {
    Acquire(moveMutex);
    setpoint -= 100;
   }
   else if (ButtonPressed (BTNRIGHT, false))                                    // börv ökar om man tryckeer på höger pil
   {
    Acquire(moveMutex);
    setpoint += 100;
   }
   ClearLine(LCD_LINE3);
   NumOut(0, LCD_LINE3, setpoint, false);
   Wait (MS_100);
   Release(moveMutex);
   }
}
task drive()
{
 while (true)
 {
   Acquire(moveMutex);

   //Hast.räknare
   long time = CurrentTick() - prev_time;
   long degrees = MotorRotationCount(MOTOR) - prev_degrees;
   float cmpm = degrees*DEG_TO_CMPM/time;
   NumOut(0, LCD_LINE2, cmpm, false);
   float dt = CurrentTick()-prev_time;
   prev_time = CurrentTick();
   prev_degrees = MotorRotationCount(MOTOR);
   
   //Reglering
   float error = setpoint - cmpm;
   error_area += error * dt;
   NumOut(0, LCD_LINE4, error, false);                                          //bugtest
   NumOut(0, LCD_LINE5, error_area, false);
   long out = 0.01 * error /*+ (1/2) * error_area*/;
   OnFwd(OUT_AC, out);
   NumOut(0, LCD_LINE6, out, false);
   Wait(MS_500);                                                                // update display every 0.1 seconds
   prev_error = error;
    
   Release(moveMutex);
 }
}
task main()
{
 Precedes(button, drive);
}

// Display RPM of motor attached to the port MOTOR while running at full speed.
// The program runs continously until stopped by pressing the gray NXT button.
// Requires NXT firmware 1.28 or later (uses floating point arithmetic).
// CurrentTick returns milliseconds in a long integer.
// MotorRotationCount returns degrees in a long integer.
#define MOTOR_A OUT_A
#define MOTOR_B OUT_C
//#define FULL_SPEED 60
#define DEG_TO_MPM 166.6667*0.175 // converts degrees per millisecond to CMPM
int setpoint;
int d_count = 3;
int count;
long prev_time;
long prev_degrees_A;
float error_A;
float error_area_A;
float prev_error_A;
float d_error_A;
long out_A;
long prev_degrees_B;
float error_B;
float error_area_B;
float prev_error_B;
float d_error_B;
long out_B;
mutex moveMutex;

task button()
{
while (true)
 {
   if (ButtonPressed (BTNLEFT, false))                                           // börv minskar om man tryckeer på vänster pil
   {
    Acquire(moveMutex);
    setpoint -= 1;
   }
   else if (ButtonPressed (BTNRIGHT, false))                                    // börv ökar om man tryckeer på höger pil
   {
    Acquire(moveMutex);
    setpoint += 1;
   }
   ClearLine(LCD_LINE3);
   NumOut(0, LCD_LINE3, setpoint, false);
   Wait (MS_200);
   Release(moveMutex);
   }
}
task drive()
{
 while (true)
 {
   Acquire(moveMutex);

//Hast.räknare
   long time = CurrentTick() - prev_time;
 //hastigheten för motor A
   long degrees_A = MotorRotationCount(MOTOR_A) - prev_degrees_A;
   float mpm_A = degrees_A*DEG_TO_MPM/time;
   prev_degrees_A = MotorRotationCount(MOTOR_A);
 //hastigheten för motor B
   long degrees_B = MotorRotationCount(MOTOR_B) - prev_degrees_B;
   float mpm_B = degrees_B*DEG_TO_MPM/time;
   prev_time = CurrentTick();
   prev_degrees_B = MotorRotationCount(MOTOR_B);
   
//Reglering för motor A
   error_A = setpoint - mpm_A;
   error_area_A += error_A * time;
 //Störningar påverkar inte
   if (count <= d_count)
   {
    d_error_A = prev_error_A - error_A;                                                               // update display every 0.1 seconds
    prev_error_A = error_A;
    count = 0;
   }
   
   out_A = 6.5 * error_A + (1/50) * error_area_A + 10 * (d_error_A/(d_count*time));

   //Om det överskrider maximala motorstyrkan
   if (out_A < 100)
   {
    OnFwd(MOTOR_A, out_A);
   }
   else
   {
    OnFwd (MOTOR_A, 100);
    error_area_A -= error_A * time;
    out_A = 100;
   }
   
//Reglering för motor B
   error_B = setpoint - mpm_B;
   error_area_B += error_B * time;
 //Störningar påverkar inte
   if (count <= d_count)
   {
    d_error_B = prev_error_B - error_B;                                                               // update display every 0.1 seconds
    prev_error_B = error_B;
    count = 0;
   }

   out_B = 6.5 * error_B + (1/50) * error_area_B + 10 * (d_error_B/(d_count*time));

   //Om det överskrider maximala motorstyrkan
   if (out_B < 100)
   {
    OnFwd(MOTOR_B, out_B);
   }
   else
   {
    OnFwd (MOTOR_B, 100);
    error_area_B -= error_B * time;
    out_B = 100;
   }
//Visa på display
   ClearLine(LCD_LINE2);
   NumOut(0, LCD_LINE2, mpm_A , false);
   TextOut(50, LCD_LINE2, "m/min", false);
 /*  ClearLine(LCD_LINE4);
   NumOut(0, LCD_LINE4, error, false);
   ClearLine(LCD_LINE5);                                       //bugtest
   NumOut(0, LCD_LINE5, error_area, false);
   ClearLine(LCD_LINE6);
   NumOut(0, LCD_LINE6, out, false);
   ClearLine(LCD_LINE7);
   NumOut(0, LCD_LINE7, degrees, false); */
   ClearLine(LCD_LINE8);
   NumOut(0, LCD_LINE8, mpm_B, false);


   Wait(MS_200);

   count ++;

   Release(moveMutex);
 }
}
task main()
 {
  Precedes(button, drive);
 }

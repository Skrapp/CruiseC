// Display RPM of motor attached to the port MOTOR while running at full speed.
// The program runs continously until stopped by pressing the gray NXT button.
// Requires NXT firmware 1.28 or later (uses floating point arithmetic).
// CurrentTick returns milliseconds in a long integer.
// MotorRotationCount returns degrees in a long integer.
#define MOTOR OUT_A
//#define FULL_SPEED 60
#define DEG_TO_CMPM 166.6667*0.175 // converts degrees per millisecond to CMPM
int setpoint;
int d_count = 3;
int count;
float error_area;
float prev_error;
float error;
float d_error;
long prev_time;
long out;
long prev_degrees;
mutex moveMutex;

task button()
{
while (true)
 {
   if (ButtonPressed (BTNLEFT, false))                                           // börv minskar om man tryckeer på vänster pil
   {
    Acquire(moveMutex);
    setpoint -= 1;
   }
   else if (ButtonPressed (BTNRIGHT, false))                                    // börv ökar om man tryckeer på höger pil
   {
    Acquire(moveMutex);
    setpoint += 1;
   }
   ClearLine(LCD_LINE3);
   NumOut(0, LCD_LINE3, setpoint, false);
   Wait (MS_200);
   Release(moveMutex);
   }
}
task drive()
{
 while (true)
 {
   Acquire(moveMutex);

//Hast.räknare
   long time = CurrentTick() - prev_time;
   long degrees = MotorRotationCount(MOTOR) - prev_degrees;
   float cmpm = degrees*DEG_TO_CMPM/time;
   prev_time = CurrentTick();
   prev_degrees = MotorRotationCount(MOTOR);
   
//Reglering
   error = setpoint - cmpm;
   error_area += error * time;
 //Störningar påverkar inte
   if (count <= d_count)
   {
    d_error = prev_error - error;                                                               // update display every 0.1 seconds
    prev_error = error;
    count = 0;
   }
   
   out = 6.5 * error + (1/50) * error_area + 10 * (d_error/(d_count*time));

   //Om det överskrider maximala motorstyrkan
   if (out < 100)
   {
    OnFwd(OUT_AC, out);
   }
   else
   {
    OnFwd (OUT_AC, 100);
    error_area -= error * time;
    out = 100;
   }
//Visa på display
   ClearLine(LCD_LINE2);
   NumOut(0, LCD_LINE2, cmpm , false);
   TextOut(50, LCD_LINE2, "m/min", false);
   ClearLine(LCD_LINE4);
   NumOut(0, LCD_LINE4, error, false);
   ClearLine(LCD_LINE5);                                       //bugtest
   NumOut(0, LCD_LINE5, error_area, false);
   ClearLine(LCD_LINE6);
   NumOut(0, LCD_LINE6, out, false);
   ClearLine(LCD_LINE7);
   NumOut(0, LCD_LINE7, degrees, false);


   Wait(MS_200);

   count ++;

   Release(moveMutex);
 }
}
task main()
 {
  Precedes(button, drive);
 }
